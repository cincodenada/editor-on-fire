EOF proposed file format (revision 'H'):

	FILE HEADER:
8 bytes:	'E','O','F','S','O','N','H','\0'
8 bytes:	(padding)

	CHART PROPERTIES:
4 bytes:	Project revision number
*1 byte:	Timing format (0=Milliseconds,1=Deltas)
*4 bytes:	Time division (only to be used if the timing format is "deltas", will probably be informational unless EOF changes the time division used)

	SONG PROPERTIES:
*2 bytes:	Album string length
*[varies]:	Album string
2 bytes:	Artist string length
[varies]:	Artist string
2 bytes:	Title string length
[varies]:	Title string
2 bytes:	Frettist string length
[varies]:	Frettist string
*2 bytes:	Genre string length
*[varies]:	Genre string
2 bytes:	Year string length
[varies]:	Year string
2 bytes:	Loading Text string length
[varies]:	Loading Text string
1 byte:		Boolean:  Lyrics present (from Song Properties)
1 byte:		Boolean:  Eighth note HOPO (from Song Properties)
*3 bytes:	Cassette color (8 bit intensity each for Red, Green and Blue)
*1 byte:	Band difficulty level (0-6 or 0xFF)
*1 byte:	Bass difficulty level (0-6 or 0xFF)
*1 byte:	Drums difficulty level (0-6 or 0xFF)
*1 byte:	Guitar difficulty level (0-6 or 0xFF)
*1 byte:	Vocal difficulty level (0-6 or 0xFF)
*1 byte:	Keys difficulty level (0-6 or 0xFF)
*1 byte:	Pro guitar difficulty level (0-6 or 0xFF)
*1 byte:	Pro bass difficulty level (0-6 or 0xFF)
*1 byte:	Pro keys difficulty level (0-6 or 0xFF)
!	FoFiX doesn't reportedly support a vocal difficulty value yet, but planning ahead doesn't hurt
!	Difficulty levels 0 through 5 are a regular graduated scale of difficulty, 6 represents "5 devil skulls" which is extra hard
!	A difficulty level of 0xFF can be stored just so the chart author can indicate that an instrument/vocal part is not present
!	If an instrument/vocal part is not present, EOF should skip writing a song.ini entry for it
*1 byte:	Force FoFiX to use the chart's background.png as the background
*1 byte:	HOPO frequency (0-5, requires the user's "Song HOPO Freq" FoFiX setting to be set to "Auto")
*1 byte:	Icon ID string length
*[varies]:	Icon ID string (The following are supportedly natively in FoFiX: rb1,rb2,rbdlc,rbtpk,gh1,gh2,gh2dlc,gh3,gh3dlc,gh80s,gha,ghm,ph1,ph2,ph3,ph4,phm.  Custom icon strings can be used in FoFiX.)
*1 byte:	Boolean:  The song audio is a cover version
*1 byte:	Boolean:  The chart is a tutorial and should be hidden during quickplay in FoFiX
*1 byte:	Unlock ID string length
*[varies]:	Unlock ID string (The tier this chart is in)
*1 byte:	Unlock ID required string length
*[varies]:	Unlock ID required string (The tier that needs to be finished for this chart to be unlocked)
*1 byte:	Unlock text string length
*[varies]:	Unlock text string (The text that FoFiX will display if this chart is not unlocked)
*4 bytes:	User specified chart version number

2 bytes:	Number of OGG profiles
OGG PROFILE CHUNK, for each OGG profile:
{
*	2 bytes:	OGG file name string length
	[varies:]	OGG file name string
	4 bytes:	MIDI delay for this profile (milliseconds)
*	1 byte:		OGG profile flags (such as whether the file was originally provided as an OGG or if it was re-encoded, is being mixed with active OGG profile audio, etc)
}

2 bytes:	Number of INI settings
INI SETTING CHUNK, for each INI setting:
{
*	2 bytes:	INI setting string length
*	[varies:]	INI setting string
}

4 bytes:	Number of beats in the chart
BEAT CHUNK, for each beat:
{
	4 bytes:	PPQN
	4 bytes:	Position (in milliseconds or delta ticks)
	4 bytes:	Beat flags
*	1 byte:		Key signature (If the MSB is zero, the KS is defined by the number of flats, otherwise the number of sharps.  Bits 0-6 define the number of sharps/flats in this Key Signature)
}

4 bytes:	Number of text events
TEXT EVENT CHUNK, for each text event:
{
*	2 bytes:	Text event string length
*	[varies:]	Text event string
	4 bytes:	Associated beat number
}

*4 bytes:	Number of tracks
TRACK CHUNK, for each track:
{
*	2 bytes:	Track name string length
*	[varies:]	Track name string
*	4 bytes:	Track number (Matching macros such as EOF_TRACK_GUITAR)
*	1 byte:		Track type (0=Global,1=Guitar,2=Drum,3=Pro drum,3=Vocal,4=Pro Guitar,5=Keys,6=extra lane drums,7=extra lane guitar ...)
*	4 bytes:	Track flags (ie. which difficulties are locked for editing)

*	4 bytes:	Number of section types stored for this track
*	SECTION TYPE CHUNK, for each section type
*	{
*		2 bytes:	Type of section (ie. solo, star power, lyric phrase, trill, yellow tom, blue tom, green tom, arpeggio, pro keys trainer, custom MIDI note, preview section, etc)

*		4 bytes:	Number of the specified sections stored
*		SECTION CHUNK, for each of the specified type of sections
*		{
*			2 bytes:	Section name string length
*			[varies:]	Section name string
*			4 bytes:	Start position of section (in milliseconds or delta ticks)
*			4 bytes:	End position of section (in milliseconds or delta ticks)
*			2 bytes:	Section flags
*		}
*	}
!	There can be a "global track" that stores sections or other data that apply to multiple tracks, such as unison SP sections,
!	or sections that don't apply to any specific track, such as a song preview section

	[GUITAR/DRUM/PRO DRUM TRACK FORMAT]
		4 bytes:	Number of notes
		NOTE CHUNK, for each note
		{
*			2 bytes:	Chord name string length
*			[varies:]	Chord name string
			1 byte:		Note type (difficulty)
			1 byte:		Note bitflag (on/off statuses)
			4 bytes:	Note position (in milliseconds or delta ticks)
			4 bytes:	Note length (in milliseconds or delta ticks)
*			2 bytes:	Note flags (allow for more flags.  When this is implemented, ensure that Expert+ bass gets its own status flag again)
		}

	[VOCAL TRACK FORMAT]
*		1 byte:		Rock Band compliance flag (1=compliant, the chart doesn't use pitches outside the allowed range of [36,84])
*		1 byte:		Tone set number assigned to this track (ie. 0=Grand Piano, 1=MIDI device, ...)
		4 bytes:	Number of lyrics
		LYRIC CHUNK, for each lyric:
		{
*			2 bytes:	Lyric text string length
*			[varies:]	Lyric text string
			1 byte:		Note pitch
			4 bytes:	Lyric position (in milliseconds or delta ticks)
			4 bytes:	Lyric position (in milliseconds or delta ticks)
*			1 byte:		Track number (ie. 1=PART VOCALS, 2=PART HARM1, 3=PART HARM2...)
*			2 bytes:	Lyric flags
		}

	[PRO GUITAR TRACK FORMAT]
*		1 byte:		Rock Band compliance flag (1=compliant, presumably that the chart doesn't use any fret higher than 17)

*		1 byte:		The number of strings on this track's guitar (ie. 4 for standard bass guitar, 6 for standard guitar)
*		PRO GUITAR TUNING CHUNK, for each string
*		{
*			1 byte:		The note this string sounds when played open (no frets held)
*		}
!			The first string defined refers to string 1 (high E), consistent with guitar terminology
!			The note numbering system is based on A440 tuning, where note A4 is 440Hz and is referred to as note 69.  Mid C (note C4) is referred to as note 60

*		4 bytes:	Number of notes
*		PRO GUITAR NOTE CHUNK, for each note
*		{
*			2 bytes:	Chord name string length
*			[varies:]	Chord name string
*			1 byte:		Note type (difficulty)
*			2 bytes:	Note bitflag (string use statuses: set=played, reset=not played)
!				Bit 0 refers to string 1 (high E), bit 5 refers to string 6 (low E), consistent with guitar terminology
*			FRET CHUNK, for each set bit in the guitar note bitflag
*			{
*				1 byte:		Fret # tab (0=Open strum, #=Fret # pressed, 0xFF=Muted)
*			}
*			4 bytes:	Note position (in milliseconds or delta ticks)
*			4 bytes:	Note length (in milliseconds or delta ticks)
*			4 bytes:	Note flags (allow 32 flags for an unforsee-able number of techniques such as tapping, bending, etc)
*		}

	[KEYS TRACK FORMAT]
*		1 byte:		Rock Band compliance flag (1=compliant, the chart doesn't use notes outside the currently unknown accepted range)
*		1 byte:		Tone set number assigned to this track (ie. 0=Grand Piano, 1=MIDI device, ...)

*		4 bytes:	Number of chords
!			For the sake of this format, "chord" will refer to all notes defined at a given position in a difficulty in a keys track,
!			even if there are not multiple notes, and notes will refer to individual notes in the chord
*		KEY CHORD CHUNK, for each note
*		{
*			2 bytes:	Chord name string length
*			[varies:]	Chord name string
*			1 byte:		Chord type (difficulty)
*			1 byte:		Chord hand (1=right hand- ie. melody, 2=left hand- ie. chords)
!				Rock Band 3 won't support two hand keys tracks, so this would be a feature for other games such as Synthesia/Doremi Mania)
!				Two chords should be allowed to be defined at any timestamp, as each hand should be allowed to play one
*			1 byte:		Number of keys played in this note/chord
*			KEY NOTE CHUNK, for each key in the chord
*			{
*				1 byte:		Note number
*				1 byte:		Note velocity
*				1 byte:		Note flags (for storing accidentals)
*			}

*			4 bytes:	Note position (in milliseconds or delta ticks)
*			4 bytes:	Note length (in milliseconds or delta ticks)
*			2 bytes:	Chord flags
*		}

	[EXTRA LANE GUITAR/DRUMS TRACK FORMAT]
*		1 byte:		DTX Mania compliance flag (1=compliant, the track has 8 drum lanes?)
*		1 byte:		The number of lanes included in this track

*		4 bytes:	Number of notes
*		EXTRA LANE CHORD CHUNK, for each note
*		{
*			1 byte:		Note type (difficulty)
*			1 byte:		Number of lanes played at this position
*			EXTRA LANE NOTE CHUNK, for each lane played at this position
*			{
*				1 byte:		Lane number containing a playable note
*			}
*			4 bytes:	Note position (in milliseconds or delta ticks)
*			4 bytes:	Note length (in milliseconds or delta ticks)
*			2 bytes:	Note flags (among other specialized flags, DTXMania supposedly tracks whether hi-hat is open/closed)
*		}
}

*1 bytes:	Number of bookmarks
BOOKMARK CHUNK, for each of the bookmarks:
{
	4 bytes:	Bookmark position (in milliseconds or delta ticks)
}

4 bytes:	Number of catalog entries
FRET CATALOG CHUNK, for each catalog entry:
{
*	2 bytes:	Entry name string length
*	[varies:]	Entry name string
*	4 bytes:	Track number (matching the track number in the track chunk)
	1 byte:		Entry type (difficulty)
	4 bytes:	Start position of entry (in milliseconds or delta ticks)
	4 bytes:	End position of entry (in milliseconds or delta ticks)
}


!NOTES:

!Rock Band 3 has a new type of phrase people are referring to as trill phrases
!This is sort of like a section with a freestyle strumming for a single button (fret 1-5), perhaps more
!Supposedly, the player can strum as slowly or quickly as desired provided that the specific notes defined
!in the trill phrase are hit.

!Rock Band 2 and Rock Band 3 (Pro drums) use MIDI markers to define which yellow, blue and green notes are to be played
!as toms (pads) instead of cymbals (which are separate from the 4 pads on a compatible drum set controller).
!	Note:  Pro drums are currently being implemented as note statuses, requiring extra logic to simulate phrasing

!For keys and vocal track charting in grand staff mode, track accidentals for each note in each chord (4 bits):
!The flat/sharp status of each line in the staff is refreshed at the beginning of each measure
!If a note extends across a measure, its flat/sharp status is retained for the duration of that measure
	00 : No accidental (any previous flat/sharp is still in effect)
	01 : Flat (lower note by one semitone)
	10 : Sharp (raise note by one semitone)
	11 : Natural (cancel any flat/sharp in effect for this line in the staff, until the next measure/accidental/key change)